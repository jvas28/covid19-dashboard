{"version":3,"sources":["services/client.js","services/api.js","services/countries.js","services/charts.js","components/Map.jsx","components/Card.jsx","components/ToggleCard.js","components/FilterBar.js","components/Trend.js","components/CountryList.jsx","components/StatsBar.jsx","components/TopBar.jsx","App.js","services/geolocation.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","process","inMap","Object","keys","namesMap","getCountryByName","n","countries","find","name","getFlagUrl","country","code","mapOptions","coordinates","rawData","geoCoordMap","mapData","forEach","item","geoCoord","push","value","slice","backgroundColor","tooltip","trigger","geo","show","map","top","silent","zoom","center","scaleLimit","min","max","zlevel","emphasis","label","areaColor","itemStyle","borderWidth","borderColor","shadowColor","shadowBlur","roam","grid","series","type","coordinateSystem","data","selectedMode","activeOpacity","formatter","position","cases","deaths","recovered","toLocaleString","symbolSize","Math","sqrt","parseInt","color","echarts","registerMap","world","Map","selected","el","useRef","coordMap","latitude","longitude","parseFloat","getCoordMap","getOption","useEffect","current","options","instance","getInstanceByDom","undefined","init","setOption","window","onresize","resize","ref","style","width","height","Card","Icon","title","className","ToggleCard","children","minWidth","FilterBar","settings","onSelect","onTextChange","onChange","e","target","placeholder","entries","icon","activeClass","onClick","key","Trend","dates","c","confirmed","d","r","dt","date","Date","axisPointer","bottom","left","right","xAxis","boundaryGap","yAxis","smooth","normal","areaStyle","trendOptions","filters","CountryItem","setSelected","history","filter","alt","src","toFixed","CountryList","countryData","useState","setFilter","search","setSearch","setHistory","sort","a","apiName","get","then","getCountryHistory","toLowerCase","includes","index","StatsBar","globalStats","statsByCountry","showSideBar","id","GiWorld","onToggle","alert","open","FaHospital","FaCross","GiHealing","FaMapMarkerAlt","TopBar","setShowSideBar","href","App","setCoordinates","setData","setGlobalStats","success","error","navigator","geolocation","getCurrentPosition","coords","console","log","getCoordinates","length","last","catch","values","stats","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"kSACeA,IAAMC,OAAO,CACxBC,QAAS,yDACTC,QAAS,CACL,kBAAmBC,qCACtB,iBAAkBA,wD,OCFjBC,EAAQC,OAAOC,KAAKC,G,iBCFbC,EAAmB,SAAAC,GAC9B,OAAOC,EAAUC,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcH,IAAMG,MAgB/BC,EAAa,SAACD,GACzB,IAAME,EAAUN,EAAiBI,GACjC,OAAGE,EACK,+BAAN,OAAsCA,EAAQC,KAA9C,gBAEO,qC,SCtBEC,EAAa,WAA+C,IAA9CC,EAA6C,uDAA/B,KAAMC,EAAyB,uCAAhBC,EAAgB,uCAClEC,EAAU,GAUd,OATAF,EAAQG,SAAQ,SAACC,GACf,IAAMC,EAAWJ,EAAYG,EAAK,IAC9BC,GACFH,EAAQI,KAAK,CACXZ,KAAMU,EAAK,GACXG,MAAM,GAAD,mBAAMF,GAAN,YAAmBD,EAAKI,MAAM,UAIlC,CACLC,gBAAiB,UACjBC,QAAS,CACPC,QAAS,QAEXC,IAAK,CACHC,MAAM,EACNC,IAAK,QACLC,IAAK,IACLC,QAAQ,EACRC,KAAMlB,EAAc,EAAI,EACxBmB,OAAM,OAAEnB,QAAF,IAAEA,IAAe,GACvBoB,WAAY,CACVC,IAAK,EACLC,IAAK,IAEPC,OAAQ,EACRC,SAAU,CACRC,MAAO,CACLC,UAAW,QAEbC,UAAW,CACTD,UAAW,cAGfC,UAAW,CACTC,YAAa,GACbC,YAAa,UACbnB,gBAAiB,QAEnBoB,YAAa,qBACbC,WAAY,GACZC,MAAM,GAERC,KAAM,CACJ,CACEnB,MAAM,EACNe,YAAa,cACbnB,gBAAiB,YAGrBwB,OAAQ,CACN,CACEvC,KAAM,QACNwC,KAAM,UACNC,iBAAkB,MAClBC,KAAMlC,EACNyB,YAAa,EACbU,aAAc,SACdC,cAAe,EACfd,MAAO,CACLe,UAAW,MACXC,SAAU,QACV3B,MAAM,GAERH,QAAS,CACP6B,UAAW,SAAUnC,GAAO,IAAD,cACcA,EAAKgC,KAAK7B,MADxB,GACdkC,EADc,KACPC,EADO,KACCC,EADD,KAEzB,MAAM,uCAAN,OACwBhD,EAAWS,EAAKV,MADxC,+DAEoCU,EAAKV,KAFzC,8DAGkC+C,EAAMG,iBAHxC,0DAI+BF,EAAOE,iBAJtC,8DAKmCD,EAAUC,iBAL7C,oCASJC,WAAY,SAAUT,GACpB,OAAOU,KAAKC,KAAKC,SAASZ,EAAK,KAAO,GAExCV,UAAW,CACTuB,MAAO,0BACPrB,YAAa,W,0BC/EvBsB,IAAQC,YAAY,QAASC,GAC7B,IAsCeC,EAtCF,SAAC,GAAmC,IAAlCjB,EAAiC,EAAjCA,KAAMrC,EAA2B,EAA3BA,YAAauD,EAAc,EAAdA,SACxBC,EAAKC,mBACLvD,EFJiB,WACzB,IAAMwD,EAAW,GAIjB,OAHAjE,EAAUW,SAAQ,YAAoC,IAAjCT,EAAgC,EAAhCA,KAAMgE,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,UACnCF,EAAS/D,GAAQ,CAACkE,WAAWD,GAAYC,WAAWF,OAE/CD,EEDeI,GACdC,EAAYhE,EA8BlB,OA7BAiE,qBAAU,WACN,GAAGR,GAAMA,EAAGS,QAAS,CACjB,IAAMC,EAAUH,EAAU/D,EAAaqC,EAAMnC,GACzCiE,EAAWhB,IAAQiB,iBAAiBZ,EAAGS,cAE3BI,IAAbF,KACCA,EAAWhB,IAAQmB,KAAKd,EAAGS,UAClBM,UAAUL,GACnBM,OAAOC,SAAW,kBAAMN,EAASO,WAErCP,EAASI,UAAUL,MAIzB,CAAC7B,EAAMrC,IACTgE,qBAAU,WACN,IAAMnE,EAAUN,EAAiBgE,GACjC,GAAG1D,EAAS,CAAC,IACH8D,EAAuB9D,EAAvB8D,SAAUC,EAAa/D,EAAb+D,UAChBD,EAAYE,WAAWF,GACvBC,EAAaC,WAAWD,GACxB,IAAMM,EAAUH,EAAU,CAACH,EAAWD,GAAWtB,EAAMnC,GACxCiD,IAAQiB,iBAAiBZ,EAAGS,SAClCM,UAAUL,MAIzB,CAAC7B,EAAMnC,EAAa6D,EAAWR,IAG7B,yBAAKoB,IAAKnB,EAAKoB,MAAO,CAACC,MAAO,OAAQC,OAAQ,YCvCvC,SAASC,EAAT,GAAoD,IAArCC,EAAoC,EAApCA,KAAMxE,EAA8B,EAA9BA,MAAOyE,EAAuB,EAAvBA,MAAuB,IAAhB/B,aAAgB,MAAV,QAAU,EAC9D,OACI,yBAAKgC,UAAS,2EAAsEhC,EAAtE,wBACV,kBAAC8B,EAAD,CAAME,UAAU,YAChB,uBAAGA,UAAU,uBAAuB1E,EAAQA,EAAMqC,iBAAkB,OACpE,uBAAGqC,UAAU,6CAA6CD,ICLvD,SAASE,EAAT,GAA8C,IAAzBC,EAAwB,EAAxBA,SAAUJ,EAAc,EAAdA,KAAMC,EAAQ,EAARA,MAChD,OACE,yBAAKL,MAAO,CAACS,SAAU,KAAMH,UAAS,0GACpC,yBAAKA,UAAU,wEACX,wBAAIA,UAAU,wCAAuC,kBAACF,EAAD,CAAME,UAAU,SAASD,IAElF,oCACCG,I,qBCNM,SAASE,EAAT,GAAmE,IAA/CC,EAA8C,EAA9CA,SAAUhC,EAAoC,EAApCA,SAAUiC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAC7D,OACI,yBAAKP,UAAU,uEACX,yBAAKA,UAAU,iBACX,2BAAOA,UAAU,yBAAyBQ,SAAU,SAACC,GAAD,OAAKF,EAAaE,EAAEC,OAAOpF,QAAQqF,YAAY,4BAEvG,yBAAKX,UAAU,iBAEH9F,OAAO0G,QAAQP,GAAUxE,KAAI,YAAgC,IAAD,mBAA7BpB,EAA6B,YAAtBoG,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,YACxC,OAAO,yBAAKC,QAAS,kBAAIT,EAAS7F,IAClCuG,IAAKvG,EACLuF,UAAS,wKAEP3B,IAAW5D,EAAOqG,EAAa,KACpCD,Q,6BCbV,SAASI,EAAT,GAA+B,IAAD,IAAb9D,YAAa,MAAN,GAAM,EACrCmB,EAAKC,mBAcX,OAbAO,qBAAU,WACR,GAAIR,GAAMA,EAAGS,QAAS,CACpB,IAAMC,ELoFgB,SAACf,EAASlD,GACpC,IAAIyC,EAAQ,GACVC,EAAS,GACTC,EAAY,GACZwD,EAAQ,GAQV,OAPAnG,EAAQG,SAAQ,SAACC,GAAU,IACRgG,EAAyChG,EAApDiG,UAAsBC,EAA8BlG,EAAtCsC,OAAsB6D,EAAgBnG,EAA3BuC,UAAoB6D,EAAOpG,EAAbqG,KAC7CN,EAAM7F,KAAK,IAAIoG,KAAKF,IACpB7D,EAAUrC,KAAKiG,GACf9D,EAAMnC,KAAK8F,GACX1D,EAAOpC,KAAKgG,MAEP,CACL5F,QAAS,CACPC,QAAS,OACTgG,YAAa,CACXzE,KAAM,QACNV,MAAO,CACLX,MAAM,KAIZmB,KAAM,CACJvB,gBAAiB,cACjBM,IAAK,EACL6F,OAAQ,GACRC,KAAM,GACNC,MAAO,IAETC,MAAO,CACL,CACE7E,KAAM,WACN8E,aAAa,EACb5E,KAAM+D,EACNtF,MAAM,IAGVoG,MAAO,CACL,CACE/E,KAAM,QACNrB,MAAM,IAGVoB,OAAQ,CACN,CACEvC,KAAM,QACNwC,KAAM,OACNgF,QAAQ,EACR1F,MAAO,CACL2F,OAAQ,CACNtG,MAAM,EACN2B,SAAU,QAGdS,MAAO,UACPmE,UAAW,CACTnE,MAAO,aAETb,KAAMK,GAER,CACE/C,KAAM,SACNwC,KAAM,OACNgF,QAAQ,EACRjE,MAAO,UACPzB,MAAO,CACL2F,OAAQ,CACNtG,MAAM,EACN2B,SAAU,QAGd4E,UAAW,CACTnE,MAAO,aAETb,KAAMM,GAER,CACEhD,KAAM,YACNwC,KAAM,OACNgF,QAAQ,EACRjE,MAAO,UACPzB,MAAO,CACL2F,OAAQ,CACNtG,MAAM,EACN2B,SAAU,QAGd4E,UAAW,CACTnE,MAAO,aAETb,KAAMO,KK9KQ0E,CAAanE,IAASd,GAClC8B,EAAWhB,IAAQiB,iBAAiBZ,EAAGS,cAE1BI,IAAbF,KACFA,EAAWhB,IAAQmB,KAAKd,EAAGS,UAClBM,UAAUL,GACnBM,OAAOC,SAAW,kBAAMN,EAASO,WAEnCP,EAASI,UAAUL,MAEpB,CAAC7B,EAAMmB,IACH,yBAAKoB,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAAWH,IAAKnB,ICX9D,IAAM+D,EAAU,CACd7E,MAAO,CACLuC,MAAO,QACPe,YAAa,gBACbD,KAAM,kBAAC,IAAD,OAERpD,OAAQ,CACNsC,MAAO,SACPe,YAAa,aACbD,KAAM,kBAAC,IAAD,OAERnD,UAAW,CACTqC,MAAO,YACPe,YAAa,eACbD,KAAM,kBAAC,IAAD,QAGJyB,EAAc,SAAC,GAOd,IANLjE,EAMI,EANJA,SACA5D,EAKI,EALJA,KACA8H,EAII,EAJJA,YACApF,EAGI,EAHJA,KACAqF,EAEI,EAFJA,QACAC,EACI,EADJA,OAEA,OACE,yBAAKzC,UAAU,OACb,yBACEA,UAAS,oEACe3B,IAAa5D,EAAO,OAAS,KAErD,yBACEuF,UAAS,4CACI,UAAXyC,EAAqB,WAAa,YAEpC1B,QAAS,kBACawB,EAApBlE,IAAa5D,EAAmB,KAAoBA,KAGtD,yBAAKuF,UAAU,6CACb,yBAAKA,UAAU,OAAO0C,IAAI,eAAeC,IAAKjI,EAAWD,KACzD,8BAAOA,IAET,6BACc,UAAXgI,EACC,2BAAOzC,UAAU,qDAAjB,aACI7C,EAAKsF,GAAUtF,EAAI,MAAa,KAAKyF,QAAQ,IAAM,GADvD,QAIA,GAEDzF,EAAKsF,GAAUtF,EAAKsF,GAAQ9E,iBAAmB,KAGnDU,IAAa5D,EACZ,yBAAKuF,UAAU,mBACb,kBAACiB,EAAD,CAAO9D,KAAMqF,KAEb,QAKG,SAASK,EAAT,GAAuD,IAAhC1F,EAA+B,EAA/BA,KAAMoF,EAAyB,EAAzBA,YAAalE,EAAY,EAAZA,SACjDyE,EAAc3F,EAAKtB,KAAI,yCAAuC,CAClEpB,KAD2B,KAE3B+C,MAF2B,KAG3BC,OAH2B,KAI3BC,UAJ2B,SADsC,EAOvCqF,mBAAS,SAP8B,mBAO5DN,EAP4D,KAOpDO,EAPoD,OAQvCD,mBAAS,IAR8B,mBAQ5DE,EAR4D,KAQpDC,EARoD,OASrCH,mBAAS,IAT4B,mBAS5DP,EAT4D,KASnDW,EATmD,KAkBnE,OARAL,EAAYM,MAAK,kBAAaC,EAAb,EAAIZ,GAAJ,SAAqBA,GAAqBY,KAE3DvE,qBAAU,WACJT,GR/CyB,SAAC/D,GAChC,IAAIK,EAAUL,EAMd,OALAJ,OAAO0G,QAAQxG,GAAUc,SAAQ,YAAsB,IAAD,mBAAnBoI,EAAmB,YACvChJ,IACXK,EAAU2I,MAGP1J,IACJ2J,IAAI,oDACJC,MAAK,YAAe,IACflC,EADGnE,EAAW,EAAXA,KAOP,OALAjD,OAAO0G,QAAQzD,GAAMtB,KAAI,YAAqB,IAAD,mBAAlBpB,EAAkB,KAAZuC,EAAY,KACvCrC,IAAYF,IACd6G,EAAItE,MAGDsE,KQgCPmC,CAAkBpF,GAAUmF,MAAK,SAACrG,GAAD,OAAUgG,EAAWhG,QAEvD,CAACkB,IAGF,oCACE,yBAAK2B,UAAU,UACb,kBAACI,EAAD,CACE/B,SAAUoE,EACVlC,aAAc2C,EACd7C,SAAUgC,EACV/B,SAAU,SAAC7F,GAAD,OAAUuI,EAAUvI,OAIlC,yBACEuF,UAAU,4DACVN,MAAO,CAAEE,OAAQ,wBAEhBkD,EACEL,QAAO,qBAAGhI,KACJiJ,cAAcC,SAASV,EAAOS,kBAEpC7H,KAAI,WAAoB+H,GAApB,IAAGnJ,EAAH,EAAGA,KAAS0C,EAAZ,+BACH,kBAAC,EAAD,CACEkB,SAAUA,EACV5D,KAAMA,EACN8H,YAAaA,EACbpF,KAAMA,EACNqF,QAASA,EACTC,OAAQA,SC5GP,SAASoB,EAAT,GAAsF,IAAnEC,EAAkE,EAAlEA,YAAaC,EAAqD,EAArDA,eAAgBxB,EAAqC,EAArCA,YAAalE,EAAwB,EAAxBA,SAAU2F,EAAc,EAAdA,YAClF,OACI,yBAAKC,GAAG,WAAWjE,UAAS,uCAAkCgE,EAAY,kCAAkC,wBACxG,kBAAC/D,EAAD,CAAYF,MAAM,eAAeD,KAAMoE,IAASC,SAAU,kBAAIC,MAAM,KAAKC,MAAM,GAC3E,yBAAKrE,UAAU,UACX,kBAACH,EAAD,CAAMC,KAAMwE,IAAYvE,MAAM,YAAYzE,MAAOwI,EAAYtG,MAAOQ,MAAO,gBAE/E,yBAAKgC,UAAU,mBACX,kBAACH,EAAD,CAAMC,KAAMyE,IAASxE,MAAM,SAASzE,MAAOwI,EAAYrG,OAAQO,MAAM,aAEzE,yBAAKgC,UAAU,mBACX,kBAACH,EAAD,CAAMC,KAAM0E,IAAWzE,MAAM,YAAYzE,MAAOwI,EAAYpG,UAAWM,MAAM,gBAGrF,kBAACiC,EAAD,CAAYF,MAAM,mBAAmBD,KAAM2E,IAAgBN,SAAU,kBAAIC,MAAM,KAAKC,MAAM,GACtF,kBAACxB,EAAD,CAAa1F,KAAM4G,EAAgBxB,YAAaA,EAAalE,SAAUA,MCnBxE,SAASqG,EAAT,GAAgD,IAA/BV,EAA8B,EAA9BA,YAAaW,EAAiB,EAAjBA,eACzC,OACI,4BAAQ3E,UAAU,4EACd,yBAAKA,UAAS,uDAAkDgE,EAAY,GAAG,eAC/EjD,QAAS,kBAAI4D,GAAgBX,KAAc,kBAAC,IAAD,OAC3C,wBAAIhE,UAAU,2BAAd,yBACA,mCAAQ,uBAAG4E,KAAK,6BAA4B,wCC0CzCC,MA3Cf,WAAgB,IAAD,EACyB9B,mBAAS,CAAC,EAAE,IADrC,mBACNjI,EADM,KACOgK,EADP,OAEW/B,mBAAS,IAFpB,mBAEN5F,EAFM,KAEA4H,EAFA,OAGyBhC,mBAAS,CAC7CvF,MAAO,KACPC,OAAQ,KACRC,UAAW,OANA,mBAGNoG,EAHM,KAGOkB,EAHP,OAQyBjC,oBAAS,GARlC,mBAQNiB,EARM,KAQOW,EARP,OASmB5B,mBAAS,MAT5B,mBASN1E,EATM,KASIkE,EATJ,KAyBb,OAfAzD,qBAAU,YCjBkB,SAACmG,GAA2B,IAAlBC,EAAiB,uDAAT,KACvCC,UAAUC,YAGXD,UAAUC,YAAYC,oBAClB,SAAC9H,GACC0H,EAAQ,CAACxG,SAAUlB,EAAS+H,OAAO7G,SAAUC,UAAWnB,EAAS+H,OAAO5G,cAExEwG,GANNK,QAAQC,IAAI,6BDgBhBC,EAAe,gBAAEhH,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,UAAZ,OAAyBoG,EAAe,CAACpG,EAAWD,OAChEtB,EAAKuI,OAAS,IXdZ9L,IACJ2J,IAAI,oDACJC,MAAK,YAAe,IAAZrG,EAAW,EAAXA,KACP,OAAOjD,OAAO0G,QAAQzD,GAAMtB,KAAI,YAAqB,IAAD,mBAAlBpB,EAAkB,KAAZuC,EAAY,KAC5C2I,EAAO3I,EAAOA,EAAO0I,OAAS,GACpC,MAAO,CACLzL,EAAM0J,SAASlJ,GAAQL,EAASK,GAAQA,EACxCkL,EAAKvE,UACLuE,EAAKlI,OACLkI,EAAKjI,iBAIVkI,OAAM,SAACnF,GACN8E,QAAQL,MAAMzE,MWCG+C,MAAK,SAACnC,GACnB0D,EAAQ1D,MAEY,OAAtByC,EAAYtG,OXAX5D,IACJ2J,IAAI,oDACJC,MAAK,YAAe,IAAZrG,EAAW,EAAXA,KACDmE,EAAI,CAAE9D,MAAO,EAAGC,OAAQ,EAAGC,UAAW,GAO5C,OANAxD,OAAO2L,OAAO1I,GAAMtB,KAAI,SAACmB,GACvB,IAAM2I,EAAO3I,EAAOA,EAAO0I,OAAS,GACpCpE,EAAE9D,OAASmI,EAAKvE,UAChBE,EAAE7D,QAAUkI,EAAKlI,OACjB6D,EAAE5D,WAAaiI,EAAKjI,aAEf4D,KWTUkC,MAAK,SAACsC,GACrBd,EAAec,SAKlB,CAAC3I,EAAM2G,IAGR,yBAAK9D,UAAU,OACb,kBAAC0E,EAAD,CAAQV,YAAaA,EAAaW,eAAgBA,IAClD,yBAAK3E,UAAU,yDACb,kBAAC6D,EAAD,CACAxF,SAAUA,EACV2F,YAAaA,EACbzB,YAAaA,EACbuB,YAAaA,EACbC,eAAgB5G,IAChB,yBAAK6C,UAAU,iBACb,kBAAC,EAAD,CAAK7C,KAAMA,EAAMrC,YAAaA,EAAauD,SAAUA,QE/BzD0H,EAAcC,QACW,cAA7B1G,OAAO2G,SAASC,UAEe,UAA7B5G,OAAO2G,SAASC,UAEhB5G,OAAO2G,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BnB,UAAUoB,cACPC,SAASH,GACT7C,MAAK,SAAAiD,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf3B,UAAUoB,cAAcQ,YAI1BxB,QAAQC,IACN,iHAKEc,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlBlB,QAAQC,IAAI,sCAGRc,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5Bb,OAAM,SAAAV,GACLK,QAAQL,MAAM,4CAA6CA,MC1FjEgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBhB,GACvB,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoC,IAAIvN,6CAAwBsF,OAAO2G,SAASrB,MACpD4C,SAAWlI,OAAO2G,SAASuB,OAIvC,OAGFlI,OAAOmI,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMrM,6CAAN,sBAEP+L,IAgEV,SAAiCM,EAAOC,GAEtCoB,MAAMrB,EAAO,CACXtM,QAAS,CAAE,iBAAkB,YAE5ByJ,MAAK,SAAAmE,GAEJ,IAAMC,EAAcD,EAAS5N,QAAQwJ,IAAI,gBAEnB,MAApBoE,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C3C,UAAUoB,cAAcwB,MAAMvE,MAAK,SAAAiD,GACjCA,EAAauB,aAAaxE,MAAK,WAC7BlE,OAAO2G,SAASgC,eAKpB7B,EAAgBC,EAAOC,MAG1BV,OAAM,WACLL,QAAQC,IACN,oEAvFA0C,CAAwB7B,EAAOC,GAI/BnB,UAAUoB,cAAcwB,MAAMvE,MAAK,WACjC+B,QAAQC,IACN,iHAMJY,EAAgBC,EAAOC,OClC/BC,I","file":"static/js/main.48ec1f9e.chunk.js","sourcesContent":["import axios from 'axios';\nconst client = axios.create({\n    baseURL: \"https://coronavirus-monitor.p.rapidapi.com/coronavirus\",\n    headers: {\n        \"x-rapidapi-host\": process.env.REACT_APP_API_HOST,\n\t    \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\n    }\n})\nexport default client;","import client from \"./client\";\nimport axios from \"axios\";\nimport namesMap from \"./data/names.map\";\nconst inMap = Object.keys(namesMap);\nexport const casesByCountry = () => {\n  return axios\n    .get(\"https://pomber.github.io/covid19/timeseries.json\")\n    .then(({ data }) => {\n      return Object.entries(data).map(([name, series]) => {\n        const last = series[series.length - 1];\n        return [\n          inMap.includes(name) ? namesMap[name] : name,\n          last.confirmed,\n          last.deaths,\n          last.recovered,\n        ];\n      });\n    })\n    .catch((e) => {\n      console.error(e);\n    });\n};\nexport const getGlobalStats = () => {\n  return axios\n    .get(\"https://pomber.github.io/covid19/timeseries.json\")\n    .then(({ data }) => {\n      const r = { cases: 0, deaths: 0, recovered: 0 };\n      Object.values(data).map((series) => {\n        const last = series[series.length - 1];\n        r.cases += last.confirmed;\n        r.deaths += last.deaths;\n        r.recovered += last.recovered;\n      });\n      return r;\n    });\n};\nexport const getCountryHistory = (n) => {\n  let country = n;\n  Object.entries(namesMap).forEach(([apiName, name]) => {\n    if (name === n) {\n      country = apiName;\n    }\n  });\n  return axios\n    .get(\"https://pomber.github.io/covid19/timeseries.json\")\n    .then(({ data }) => {\n      let r;\n      Object.entries(data).map(([name, series]) => {\n        if (country === name) {\n          r = series;\n        }\n      });\n      return r;\n    });\n};\n","import countries from \"./data/countries.json\";\nexport const getCountryByName = n => {\n  return countries.find(({ name }) => n === name);\n};\nexport const getCoordMap = () => {\n  const coordMap = {};\n  countries.forEach(({ name, latitude, longitude }) => {\n    coordMap[name] = [parseFloat(longitude), parseFloat(latitude)];\n  });\n  return coordMap;\n};\nexport const missing = names => {\n  const existing = countries.map(({ name }) => {\n    return name;\n  });\n  return names.filter(name => !existing.includes(name));\n};\n\nexport const getFlagUrl = (name) => {\n  const country = getCountryByName(name);\n  if(country) {\n    return `https://www.countryflags.io/${country.code}/flat/32.png`\n  } else {\n    return \"https://via.placeholder.com/32x32\"\n  }\n  \n}","import { getFlagUrl } from \"./countries\";\nexport const mapOptions = (coordinates = null, rawData, geoCoordMap) => {\n  var mapData = [];\n  rawData.forEach((item) => {\n    const geoCoord = geoCoordMap[item[0]];\n    if (geoCoord) {\n      mapData.push({\n        name: item[0],\n        value: [...geoCoord, ...item.slice(1)],\n      });\n    }\n  });\n  return {\n    backgroundColor: \"#e2e8f0\",\n    tooltip: {\n      trigger: \"item\",\n    },\n    geo: {\n      show: true,\n      map: \"world\",\n      top: 100,\n      silent: true,\n      zoom: coordinates ? 8 : 1,\n      center: coordinates ?? [],\n      scaleLimit: {\n        min: 1,\n        max: 10,\n      },\n      zlevel: 0,\n      emphasis: {\n        label: {\n          areaColor: \"#eee\",\n        },\n        itemStyle: {\n          areaColor: \"lightgray\",\n        },\n      },\n      itemStyle: {\n        borderWidth: 0.4,\n        borderColor: \"#404a59\",\n        backgroundColor: \"blue\",\n      },\n      shadowColor: \"rgba(0, 0, 0, 0.5)\",\n      shadowBlur: 10,\n      roam: true,\n    },\n    grid: [\n      {\n        show: false,\n        borderColor: \"transparent\",\n        backgroundColor: \"#404a59\",\n      },\n    ],\n    series: [\n      {\n        name: \"Cases\",\n        type: \"scatter\",\n        coordinateSystem: \"geo\",\n        data: mapData,\n        borderWidth: 1,\n        selectedMode: \"simple\",\n        activeOpacity: 1,\n        label: {\n          formatter: \"{b}\",\n          position: \"right\",\n          show: true,\n        },\n        tooltip: {\n          formatter: function (item) {\n            const [, , cases, deaths, recovered] = item.data.value;\n            return `\n                        <img src=\"${getFlagUrl(item.name)}\" />\n                        <h1 class=\"font-bold\">${item.name}</h1>\n                        <p><b>Infected:</b> ${cases.toLocaleString()}</p>\n                        <p><b>Death:</b> ${deaths.toLocaleString()}</p>\n                        <p><b>Recovered:</b> ${recovered.toLocaleString()}</p>\n                        `;\n          },\n        },\n        symbolSize: function (data) {\n          return Math.sqrt(parseInt(data[2])) / 4;\n        },\n        itemStyle: {\n          color: \"rgba(244, 67, 54, 0.54)\",\n          borderColor: \"red\",\n        },\n      },\n    ],\n  };\n};\n\nexport const trendOptions = (echarts, rawData) => {\n  let cases = [],\n    deaths = [],\n    recovered = [],\n    dates = [];\n  rawData.forEach((item) => {\n    let { confirmed: c, deaths: d, recovered: r, date: dt } = item;\n    dates.push(new Date(dt));\n    recovered.push(r);\n    cases.push(c);\n    deaths.push(d);\n  });\n  return {\n    tooltip: {\n      trigger: \"axis\",\n      axisPointer: {\n        type: \"cross\",\n        label: {\n          show: false,\n        },\n      },\n    },\n    grid: {\n      backgroundColor: \"transparent\",\n      top: 0,\n      bottom: 10,\n      left: 20,\n      right: 20,\n    },\n    xAxis: [\n      {\n        type: \"category\",\n        boundaryGap: false,\n        data: dates,\n        show: false,\n      },\n    ],\n    yAxis: [\n      {\n        type: \"value\",\n        show: false,\n      },\n    ],\n    series: [\n      {\n        name: \"Cases\",\n        type: \"line\",\n        smooth: true,\n        label: {\n          normal: {\n            show: false,\n            position: \"top\",\n          },\n        },\n        color: \"#ecc94b\",\n        areaStyle: {\n          color: \"#ecc94bc7\",\n        },\n        data: cases,\n      },\n      {\n        name: \"Deaths\",\n        type: \"line\",\n        smooth: true,\n        color: \"#f56565\",\n        label: {\n          normal: {\n            show: false,\n            position: \"top\",\n          },\n        },\n        areaStyle: {\n          color: \"#f56565c7\",\n        },\n        data: deaths,\n      },\n      {\n        name: \"Recovered\",\n        type: \"line\",\n        smooth: true,\n        color: \"#48bb78\",\n        label: {\n          normal: {\n            show: false,\n            position: \"top\",\n          },\n        },\n        areaStyle: {\n          color: \"#48bb78c7\",\n        },\n        data: recovered,\n      },\n    ],\n  };\n};\n","import React, {useEffect, useRef} from 'react'\nimport { getCoordMap, getCountryByName } from '../services/countries';\nimport { mapOptions } from '../services/charts'\nimport echarts from 'echarts/dist/echarts';\nimport world from 'echarts/map/json/world';\necharts.registerMap('world', world);\nconst Map =  ({data, coordinates, selected}) => {\n    const el = useRef();\n    const geoCoordMap = getCoordMap();\n    const getOption = mapOptions\n    useEffect(()=>{\n        if(el && el.current) {\n            const options = getOption(coordinates, data, geoCoordMap);\n            let instance = echarts.getInstanceByDom(el.current);\n            // initialize chart\n            if(instance === undefined) {\n                instance = echarts.init(el.current);\n                instance.setOption(options);\n                window.onresize = () => instance.resize();\n            }\n            instance.setOption(options);  \n        }\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[data, coordinates]);\n    useEffect(()=>{\n        const country = getCountryByName(selected);\n        if(country) {\n            let { latitude, longitude} = country;\n            latitude =  parseFloat(latitude);\n            longitude =  parseFloat(longitude);\n            const options = getOption([longitude, latitude], data, geoCoordMap);\n            let instance = echarts.getInstanceByDom(el.current);\n            instance.setOption(options);  \n        }\n        \n\n    },[data, geoCoordMap, getOption, selected]);\n    \n    return (\n        <div ref={el}  style={{width: '100%', height: '100vh'}}>\n        </div>\n    )\n}\nexport default Map;","import React from 'react'\nexport default function Card({Icon, value, title, color=\"black\"}) {\n    return (\n        <div className={`flex flex-col md:flex-row items-center rounded md:rounded-lg  bg-${color} text-white p-3 m-1`}>\n            <Icon className=\"md:mx-2\" />\n            <p className=\"font-bold text-base\">{value ? value.toLocaleString(): '...'}</p>\n            <p className=\"text-xs flex-auto uppercase md:text-right\">{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nexport default function ToggleCard({children, Icon, title}) {\n    return (\n      <div style={{minWidth: 100}} className={`card flex flex-row md:flex-col flex-wrap rounded shadow m-3 bg-white p-2 flex flex-row justify-between`}>\n        <div className=\"w-full flex flex-row items-center text-gray-500 justify-between h-10\">\n            <h2 className=\"flex flex-row font-bold items-center\"><Icon className=\"mx-2\"/>{title}</h2>  \n        </div>\n        <>\n        {children}\n        </>\n      </div>\n    )\n}\n","import React from 'react'\n\nexport default function FilterBar({settings, selected, onSelect, onTextChange }) {\n    return (\n        <div className=\"flex flex-col justify-between bg-gray-300 p-2 rounded text-gray-800\" >\n            <div className=\"flex flex-row\">\n                <input className=\"p-2 w-full m-1 rounded\" onChange={(e)=>onTextChange(e.target.value)} placeholder=\"Type your country name\" />\n            </div>\n            <div className=\"flex flex-row\">\n                    {\n                        Object.entries(settings).map(([name, {icon, activeClass}])=>{\n                            return <div onClick={()=>onSelect(name)} \n                            key={name}\n                            className={`flex flex-auto cursor-pointer\n                            text-center content-center bg-gray-400 p-2 rounded justify-center m-1\n                            ${selected===name ? activeClass: ''}`}>\n                        {icon}\n                    </div>\n                        })\n                    }\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { trendOptions } from \"../services/charts\";\nimport echarts from \"echarts\";\nexport default function Trend({ data = [] }) {\n  const el = useRef();\n  useEffect(() => {\n    if (el && el.current) {\n      const options = trendOptions(echarts, data);\n      let instance = echarts.getInstanceByDom(el.current);\n      // initialize chart\n      if (instance === undefined) {\n        instance = echarts.init(el.current);\n        instance.setOption(options);\n        window.onresize = () => instance.resize();\n      }\n      instance.setOption(options);\n    }\n  }, [data, el]);\n  return <div style={{ width: \"100%\", height: \"250px\" }} ref={el}></div>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport { FaCross, FaHospital } from \"react-icons/fa\";\nimport FilterBar from \"./FilterBar\";\nimport { GiHealing } from \"react-icons/gi\";\nimport { getFlagUrl } from \"../services/countries\";\nimport { getCountryHistory } from \"../services/api\";\nimport Trend from \"./Trend\";\nconst filters = {\n  cases: {\n    title: \"Cases\",\n    activeClass: \"bg-yellow-500\",\n    icon: <FaHospital />,\n  },\n  deaths: {\n    title: \"Deaths\",\n    activeClass: \"bg-red-500\",\n    icon: <FaCross />,\n  },\n  recovered: {\n    title: \"Recovered\",\n    activeClass: \"bg-green-500\",\n    icon: <GiHealing />,\n  },\n};\nconst CountryItem = ({\n  selected,\n  name,\n  setSelected,\n  data,\n  history,\n  filter,\n}) => {\n  return (\n    <div className=\"p-1\">\n      <div\n        className={`p-3 cursor-pointer rounded\n    flex flex-col bg-gray-100 ${selected === name ? \"wide\" : \"\"}`}\n      >\n        <div\n          className={`flex items-center justify-between ${\n            filter !== \"cases\" ? \"flex-col\" : \"flex-row\"\n          }`}\n          onClick={() =>\n            selected === name ? setSelected(null) : setSelected(name)\n          }\n        >\n          <div className=\"flex flex-row items-center justify-center\">\n            <img className=\"mr-2\" alt=\"Country flag\" src={getFlagUrl(name)} />\n            <span>{name}</span>\n          </div>\n          <div>\n            {filter !== \"cases\" ? (\n              <small className=\"font-bold bg-blue-800 text-white p-1 rounded mx-2\">{`( ${\n                ((data[filter] / data[\"cases\"]) * 100).toFixed(2) || \"\"\n              } %)`}</small>\n            ) : (\n              \"\"\n            )}\n            {data[filter] ? data[filter].toLocaleString() : \"\"}\n          </div>\n        </div>\n        {selected === name ? (\n          <div className=\"p-3 m-1 rounded\">\n            <Trend data={history} />\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n};\nexport default function CountryList({ data, setSelected, selected }) {\n  const countryData = data.map(([name, cases, deaths, recovered]) => ({\n    name,\n    cases,\n    deaths,\n    recovered,\n  }));\n  const [filter, setFilter] = useState(\"cases\");\n  const [search, setSearch] = useState(\"\");\n  const [history, setHistory] = useState([]);\n  countryData.sort(({ [filter]: a }, { [filter]: b }) => b - a);\n\n  useEffect(() => {\n    if (selected) {\n      getCountryHistory(selected).then((data) => setHistory(data));\n    }\n  }, [selected]);\n\n  return (\n    <>\n      <div className=\"w-full\">\n        <FilterBar\n          selected={filter}\n          onTextChange={setSearch}\n          settings={filters}\n          onSelect={(name) => setFilter(name)}\n        />\n      </div>\n\n      <div\n        className=\"flex flex-col w-full overflow-y-scroll overflow-x-visible\"\n        style={{ height: \"calc(100vh - 500px)\" }}\n      >\n        {countryData\n          .filter(({ name }) =>\n            name.toLowerCase().includes(search.toLowerCase())\n          )\n          .map(({ name, ...data }, index) => (\n            <CountryItem\n              selected={selected}\n              name={name}\n              setSelected={setSelected}\n              data={data}\n              history={history}\n              filter={filter}\n            />\n          ))}\n      </div>\n    </>\n  );\n}\n","import React from 'react'\nimport Card from './Card';\nimport ToggleCard from './ToggleCard';\nimport CountryList from './CountryList';\nimport { FaCross, FaHospital, FaMapMarkerAlt } from 'react-icons/fa';\nimport { GiHealing, GiWorld } from \"react-icons/gi\";\nexport default function StatsBar({globalStats, statsByCountry, setSelected, selected, showSideBar}) {\n    return (\n        <div id=\"side-bar\" className={`absolute z-10 mt-12 md:z-10  ${showSideBar?'w-full md:w-1/3 lg:w-1/4 xl:1/5':'w-0 overflow-hidden'}`}>\n            <ToggleCard title=\"Global Stats\" Icon={GiWorld} onToggle={()=>alert('')} open={true}>\n                <div className=\"w-full\">\n                    <Card Icon={FaHospital} title=\"Confirmed\" value={globalStats.cases} color={'yellow-500'}/>\n                </div>\n                <div className=\"w-1/2 md:w-full\">\n                    <Card Icon={FaCross} title=\"Deaths\" value={globalStats.deaths} color=\"red-500\"/>\n                </div>\n                <div className=\"w-1/2 md:w-full\">\n                    <Card Icon={GiHealing} title=\"Recovered\" value={globalStats.recovered} color=\"green-500\"/>\n                </div>\n            </ToggleCard>\n            <ToggleCard title=\"Stats by country\" Icon={FaMapMarkerAlt} onToggle={()=>alert('')} open={true}>\n                <CountryList data={statsByCountry} setSelected={setSelected} selected={selected} />\n            </ToggleCard>\n        </div>\n    )\n}\n","import React from 'react'\nimport { FaBars } from 'react-icons/fa'\nexport default function TopBar({showSideBar, setShowSideBar}) {\n    return (\n        <header className=\"w-full shadow-b p-3 flex flex-row justify-between fixed z-10 bg-gray-100\">\n            <div className={`cursor-pointer p-1 rounded hover:bg-gray-400 ${showSideBar?'':'bg-gray-400'}`} \n            onClick={()=>setShowSideBar(!showSideBar)}><FaBars /></div>\n            <h1 className=\"font-bold text-gray-700\">Coronavirus Dashboard</h1>\n            <div>by <a href=\"https://github.com/jvas28\"><b>jvas28</b></a></div>\n      </header>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport { getCoordinates } from './services/geolocation'\nimport { casesByCountry, getGlobalStats } from './services/api'\nimport './App.scss';\nimport Map from './components/Map';\nimport StatsBar from './components/StatsBar';\nimport TopBar from './components/TopBar';\nfunction App() {\n  const [coordinates, setCoordinates] = useState([0,0]);\n  const [data, setData] = useState([]);\n  const [globalStats, setGlobalStats] = useState({\n    cases: null,\n    deaths: null,\n    recovered: null,\n  });\n  const [showSideBar, setShowSideBar] = useState(true);\n  const [selected, setSelected] = useState(null);\n  useEffect(()=>{\n    getCoordinates(({latitude, longitude})=>setCoordinates([longitude, latitude]));\n    if(data.length < 1) {\n      casesByCountry().then((d) => {\n          setData(d)\n     });\n     if(globalStats.cases === null) {\n      getGlobalStats().then((stats)=>{\n        setGlobalStats(stats);\n      });\n     }\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, globalStats]);\n\n  return (\n    <div className=\"App\">\n      <TopBar showSideBar={showSideBar} setShowSideBar={setShowSideBar} />\n      <div className=\"flex flex-col md:flex-row w-full bg-gray-300 absolute\">\n        <StatsBar \n        selected={selected}\n        showSideBar={showSideBar}\n        setSelected={setSelected}\n        globalStats={globalStats}\n        statsByCountry={data}/>\n        <div className=\"w-full h-full\">\n          <Map data={data} coordinates={coordinates} selected={selected} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const getCoordinates = (success, error = null) => {\n    if (!navigator.geolocation) {\n        console.log('Geolocation not supported');\n      } else {\n        navigator.geolocation.getCurrentPosition(\n            (position)=> {\n              success({latitude: position.coords.latitude, longitude: position.coords.longitude })\n            }\n            , error\n            );\n      }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}