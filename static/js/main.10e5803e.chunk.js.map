{"version":3,"sources":["img/logo.svg","services/api.js","services/countries.js","services/charts.js","components/Table.jsx","components/Map.jsx","components/Rate.jsx","components/Trend.js","components/Content.js","components/Card.jsx","components/ToggleCard.js","components/CountryListItem.jsx","components/FilterBar.js","components/CountryList.jsx","components/StatsBar.jsx","components/TopBar.jsx","App.js","services/geolocation.js","serviceWorker.js","index.js"],"names":["module","exports","inMap","Object","keys","namesMap","data","getData","Promise","resolve","axios","get","then","r","getCountryHistory","n","result","entries","map","confirmed","deaths","recovered","date","country","forEach","apiName","name","series","v","index","arr","filter","getCountryByName","countries","find","getFlagUrl","code","mapOptions","coordinates","rawData","geoCoordMap","selected","mapData","item","geoCoord","push","value","slice","backgroundColor","tooltip","trigger","geo","show","top","silent","zoom","center","scaleLimit","min","max","zlevel","emphasis","label","areaColor","itemStyle","borderWidth","borderColor","shadowColor","shadowBlur","roam","grid","type","coordinateSystem","selectedMode","activeOpacity","formatter","position","cases","toLocaleString","symbolSize","Math","sqrt","parseInt","color","Table","useState","setData","useEffect","d","numberRenderer","percentageRenderer","isNaN","toFixed","columnDefs","field","hide","cellRenderer","Date","toLocaleDateString","rowData","totalConfirmed","totalDeaths","totalRecovered","latestUpdate","rest","sort","a","deathRate","healRate","className","autoGroupColumnDef","minWidth","defaultColDef","flex","sortable","resizable","animateRows","enableRangeSelection","echarts","registerMap","world","Map","el","useRef","coordMap","latitude","longitude","parseFloat","getCoordMap","view","setView","getOption","current","options","instance","getInstanceByDom","undefined","init","setOption","window","onresize","resize","onClick","ref","style","width","height","Rate","bg","title","subtitle","delta","isFinite","Trend","dates","firstCasePassed","c","dt","text","textStyle","fontSize","axisPointer","bottom","left","right","xAxis","boundaryGap","yAxis","axisLabel","fontStyle","b","smooth","normal","areaStyle","trendOptions","Content","history","setHistory","length","reduce","acc","deltaCases","deltaRecovered","deltaDeaths","id","Card","Icon","ToggleCard","children","CountryListItem","setSelected","alt","src","FilterBar","settings","onSelect","onTextChange","onChange","e","target","placeholder","filters","activeClass","icon","CountryList","countryData","setFilter","search","setSearch","toLowerCase","includes","key","StatsBar","globalStats","statsByCountry","showSideBar","GiWorld","onToggle","alert","open","FaHospital","FaCross","GiHealing","TopBar","setShowSideBar","Logo","href","rel","App","setCoordinates","setGlobalStats","success","error","navigator","geolocation","getCurrentPosition","coords","console","log","getCoordinates","last","catch","values","stats","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.10e5803e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.65ea3200.svg\";","import axios from \"axios\";\nimport namesMap from \"./data/names.map\";\nconst inMap = Object.keys(namesMap);\nlet data = null;\n\nexport const getData = () => {\n  if (!data) {\n    return axios\n      .get(\"https://pomber.github.io/covid19/timeseries.json\")\n      .then((r) => {\n        data = r;\n        return r;\n      });\n  }\n  return Promise.resolve(data);\n};\nexport const casesByCountry = () => {\n  return getData()\n    .then(({ data }) => {\n      return Object.entries(data).map(([name, series]) => {\n        const last = series[series.length - 1];\n        return [\n          inMap.includes(name) ? namesMap[name] : name,\n          last.confirmed,\n          last.deaths,\n          last.recovered,\n        ];\n      });\n    })\n    .catch((e) => {\n      console.error(e);\n    });\n};\nexport const getGlobalStats = () => {\n  return getData().then(({ data }) => {\n    const r = { cases: 0, deaths: 0, recovered: 0 };\n    Object.values(data).map((series) => {\n      const last = series[series.length - 1];\n      r.cases += last.confirmed;\n      r.deaths += last.deaths;\n      r.recovered += last.recovered;\n      return null;\n    });\n    return r;\n  });\n};\nexport const getCountryHistory = (n = null) => {\n  if (n === null) {\n    const result = {};\n    return getData().then(({ data }) => {\n      Object.entries(data).map(([country, series]) => {\n        series.map(({ confirmed, deaths, recovered, date }) => {\n          if (!result[date]) {\n            result[date] = { confirmed, deaths, recovered };\n          }\n          result[date].confirmed += confirmed;\n          result[date].deaths += deaths;\n          result[date].recovered += recovered;\n          return null;\n        });\n        return null;\n      });\n      return Object.entries(result).map(([date, data]) => {\n        return { date, ...data };\n      });\n    });\n  }\n  let country = n;\n  Object.entries(namesMap).forEach(([apiName, name]) => {\n    if (name === n) {\n      country = apiName;\n    }\n  });\n  return getData().then(({ data }) => {\n    let r;\n    Object.entries(data).map(([name, series]) => {\n      if (country === name || country === null) {\n        r = series\n          .map((v, index, arr) => {\n            if (index < 1) {\n              return v;\n            }\n            return {\n              confirmed: v.confirmed - arr[index - 1].confirmed,\n              deaths: v.deaths - arr[index - 1].deaths,\n              recovered: v.recovered - arr[index - 1].recovered,\n              date: v.date,\n            };\n          })\n          .filter(\n            ({ confirmed, deaths, recovered }) =>\n              !(confirmed < 0 || deaths < 0 || recovered < 0)\n          );\n      }\n      return null;\n    });\n    return r;\n  });\n};\n","import countries from \"./data/countries.json\";\nexport const getCountryByName = n => {\n  return countries.find(({ name }) => n === name);\n};\nexport const getCoordMap = () => {\n  const coordMap = {};\n  countries.forEach(({ name, latitude, longitude }) => {\n    coordMap[name] = [parseFloat(longitude), parseFloat(latitude)];\n  });\n  return coordMap;\n};\nexport const missing = names => {\n  const existing = countries.map(({ name }) => {\n    return name;\n  });\n  return names.filter(name => !existing.includes(name));\n};\n\nexport const getFlagUrl = (name) => {\n  const country = getCountryByName(name);\n  if(country) {\n    return `https://www.countryflags.io/${country.code}/flat/32.png`\n  } else {\n    return \"https://via.placeholder.com/32x32\"\n  }\n  \n}","import { getFlagUrl } from \"./countries\";\nexport const mapOptions = (\n  coordinates = null,\n  rawData,\n  geoCoordMap,\n  selected\n) => {\n  var mapData = [];\n  rawData.forEach((item) => {\n    const geoCoord = geoCoordMap[item[0]];\n    if (geoCoord) {\n      mapData.push({\n        name: item[0],\n        value: [...geoCoord, ...item.slice(1)],\n      });\n    }\n  });\n  return {\n    backgroundColor: \"white\",\n    tooltip: {\n      trigger: \"item\",\n    },\n    geo: {\n      show: true,\n      map: \"world\",\n      top: 100,\n      silent: true,\n      zoom: coordinates ? 8 : 1,\n      center: coordinates ?? [],\n      scaleLimit: {\n        min: 1,\n        max: 30,\n      },\n      zlevel: 0,\n      emphasis: {\n        label: {\n          areaColor: \"#eee\",\n        },\n        itemStyle: {\n          areaColor: \"lightgray\",\n        },\n      },\n      itemStyle: {\n        borderWidth: 0.4,\n        borderColor: \"#404a59\",\n        backgroundColor: \"blue\",\n      },\n      shadowColor: \"rgba(0, 0, 0, 0.5)\",\n      shadowBlur: 10,\n      roam: true,\n    },\n    grid: [\n      {\n        show: false,\n        borderColor: \"transparent\",\n        backgroundColor: \"#404a59\",\n      },\n    ],\n    series: [\n      {\n        name: \"Cases\",\n        type: \"scatter\",\n        coordinateSystem: \"geo\",\n        data: mapData,\n        borderWidth: 1,\n        selectedMode: \"simple\",\n        activeOpacity: 1,\n        label: {\n          formatter: \"{b}\",\n          position: \"right\",\n          show: true,\n        },\n        tooltip: {\n          formatter: function (item) {\n            const [, , cases, deaths, recovered] = item.data.value;\n            return `\n                        <img src=\"${getFlagUrl(item.name)}\" />\n                        <h1 class=\"font-bold\">${item.name}</h1>\n                        <p><b>Infected:</b> ${cases.toLocaleString()}</p>\n                        <p><b>Death:</b> ${deaths.toLocaleString()}</p>\n                        <p><b>Recovered:</b> ${recovered.toLocaleString()}</p>\n                        `;\n          },\n        },\n        symbolSize: function (data) {\n          return Math.sqrt(parseInt(data[2])) / 4;\n        },\n        itemStyle: {\n          color: (item) => {\n            if (item.data.name !== selected) {\n              return \"rgba(244, 67, 54, 0.54)\";\n            } else {\n              return \"rgba(50, 20, 210, 0.54)\";\n            }\n          },\n        },\n      },\n    ],\n  };\n};\n\nexport const trendOptions = (echarts, rawData) => {\n  let cases = [],\n    deaths = [],\n    recovered = [],\n    dates = [];\n  let firstCasePassed = false;\n  rawData = rawData.filter(({ confirmed }) => {\n    if (confirmed > 0) {\n      firstCasePassed = true;\n    }\n    if (!firstCasePassed) {\n      return false;\n    }\n    return true;\n  });\n  rawData.forEach((item) => {\n    let { confirmed: c, deaths: d, recovered: r, date: dt } = item;\n    dates.push(dt);\n    recovered.push(r);\n    cases.push(c);\n    deaths.push(d);\n  });\n  return {\n    title: {\n      text: \"Daily updates\",\n      show: true,\n      textStyle: {\n        fontSize: 10,\n        color: \"#CCC\",\n      },\n    },\n    tooltip: {\n      trigger: \"axis\",\n      axisPointer: {\n        type: \"cross\",\n        label: {\n          show: false,\n        },\n      },\n    },\n    grid: {\n      backgroundColor: \"transparent\",\n      top: 25,\n      bottom: 10,\n      left: 40,\n      right: 20,\n    },\n    xAxis: [\n      {\n        type: \"category\",\n        boundaryGap: false,\n        data: dates,\n        show: false,\n      },\n    ],\n    yAxis: [\n      {\n        type: \"value\",\n        axisLabel: {\n          fontStyle: \"lighter\",\n          formatter(value, b) {\n            if (value < 999) {\n              return value;\n            }\n            if (value < 99999) {\n              return `${parseInt(value / 1000)} k`;\n            }\n            return `${(value / 1000000).toFixed(1)} M`;\n          },\n        },\n      },\n    ],\n    series: [\n      {\n        name: \"New Cases\",\n        type: \"line\",\n        smooth: true,\n        label: {\n          normal: {\n            show: false,\n            position: \"top\",\n          },\n        },\n        color: \"#ecc94b\",\n        areaStyle: {\n          color: \"#ecc94bc7\",\n        },\n        data: cases,\n      },\n      {\n        name: \"New Deaths\",\n        type: \"line\",\n        smooth: true,\n        color: \"#f56565\",\n        label: {\n          normal: {\n            show: false,\n            position: \"top\",\n          },\n        },\n        areaStyle: {\n          color: \"#f56565c7\",\n        },\n        data: deaths,\n      },\n      {\n        name: \"New Recovered\",\n        type: \"line\",\n        smooth: true,\n        color: \"#48bb78\",\n        label: {\n          normal: {\n            show: false,\n            position: \"top\",\n          },\n        },\n        areaStyle: {\n          color: \"#48bb78c7\",\n        },\n        data: recovered,\n      },\n    ],\n  };\n};\n","import React, { useEffect, useState } from \"react\";\nimport { getData } from \"../services/api\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport namesMap from \"../services/data/names.map\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-material.css\";\n\nexport default function Table({ selected }) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    getData().then(({ data: d }) => {\n      setData(d);\n    });\n  }, [data]);\n  const numberRenderer = ({ value: v }) => v.toLocaleString();\n  const percentageRenderer = ({ value: v }) =>\n    !isNaN(v) ? `${(v * 100).toFixed(2)} %` : \"-\";\n  const columnDefs = [\n    { field: \"country\", hide: selected !== null, filter: \"agTextColumnFilter\" },\n    {\n      field: \"latestUpdate\",\n      hide: selected !== null,\n      filter: \"agDateColumnFilter\",\n    },\n    {\n      field: \"date\",\n      hide: selected === null,\n      filter: \"agDateColumnFilter\",\n      cellRenderer: (data) => {\n        return data.value ? new Date(data.value).toLocaleDateString() : \"\";\n      },\n    },\n    {\n      field: \"confirmed\",\n      filter: \"agNumberColumnFilter\",\n      cellRenderer: numberRenderer,\n    },\n    {\n      field: \"deaths\",\n      filter: \"agNumberColumnFilter\",\n      cellRenderer: numberRenderer,\n    },\n    {\n      field: \"recovered\",\n      filter: \"agNumberColumnFilter\",\n      cellRenderer: numberRenderer,\n    },\n    {\n      field: \"deathRate\",\n      filter: \"agNumberColumnFilter\",\n      cellRenderer: percentageRenderer,\n    },\n    {\n      field: \"healRate\",\n      filter: \"agNumberColumnFilter\",\n      cellRenderer: percentageRenderer,\n    },\n  ];\n  let rowData = [];\n  if (selected === null) {\n    Object.entries(data).forEach(([country, data]) => {\n      let totalConfirmed = 0;\n      let totalDeaths = 0;\n      let totalRecovered = 0;\n      let latestUpdate = null;\n      data.forEach(({ confirmed, deaths, recovered, date }) => {\n        totalConfirmed += confirmed;\n        totalDeaths += deaths;\n        totalRecovered += recovered;\n        latestUpdate = date;\n      });\n      rowData.push({\n        country,\n        confirmed: totalConfirmed,\n        deaths: totalDeaths,\n        recovered: totalRecovered,\n        latestUpdate: latestUpdate,\n      });\n    });\n  } else {\n    Object.entries(data).forEach(([country, data]) => {\n      if (namesMap[country]) {\n        country = namesMap[country];\n      }\n      if (country === selected) {\n        rowData = data.map(({ date, ...rest }) => {\n          return {\n            date: new Date(date),\n            ...rest,\n          };\n        });\n      }\n    });\n  }\n\n  rowData.sort(({ confirmed: a }, { confirmed: b }) => b - a);\n  rowData = rowData.map((data) => {\n    const deathRate = data.deaths / data.confirmed;\n    const healRate = data.recovered / data.confirmed;\n\n    return { ...data, deathRate, healRate };\n  });\n  return (\n    <div className=\"ag-theme-material w-full h-full\">\n      <AgGridReact\n        columnDefs={columnDefs}\n        rowData={rowData}\n        autoGroupColumnDef={{ minWidth: 200 }}\n        defaultColDef={{\n          flex: 1,\n          minWidth: 100,\n          filter: true,\n          sortable: true,\n          resizable: true,\n        }}\n        animateRows\n        enableRangeSelection\n      ></AgGridReact>\n    </div>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { getCoordMap, getCountryByName } from \"../services/countries\";\nimport { mapOptions } from \"../services/charts\";\nimport echarts from \"echarts/dist/echarts\";\nimport world from \"echarts/map/json/world\";\nimport { FaMap, FaTable } from \"react-icons/fa\";\nimport Table from \"./Table\";\necharts.registerMap(\"world\", world);\nconst Map = ({ data, coordinates, selected }) => {\n  const el = useRef();\n  const geoCoordMap = getCoordMap();\n  const [view, setView] = useState(\"map\");\n  const getOption = mapOptions;\n  useEffect(() => {\n    if (el && el.current) {\n      const options = getOption(coordinates, data, geoCoordMap, selected);\n      let instance = echarts.getInstanceByDom(el.current);\n      // initialize chart\n      if (instance === undefined) {\n        instance = echarts.init(el.current);\n        instance.setOption(options);\n        window.onresize = () => instance.resize();\n      }\n      instance.setOption(options);\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, coordinates]);\n  useEffect(() => {\n    const country = getCountryByName(selected);\n    if (country) {\n      let { latitude, longitude } = country;\n      latitude = parseFloat(latitude);\n      longitude = parseFloat(longitude);\n      const options = getOption(\n        [longitude, latitude],\n        data,\n        geoCoordMap,\n        selected\n      );\n      let instance = echarts.getInstanceByDom(el.current);\n      instance.setOption(options);\n    }\n  }, [data, geoCoordMap, getOption, selected]);\n\n  return (\n    <div className=\"map-wrapper\">\n      <div className=\"hidden md:flex flex-row w-full justify-between mb-1 \">\n        <div className=\"p-2 font-bold text-gray-600\">\n          {view === \"map\"\n            ? \"Interactive visualization\"\n            : \"Accumulative data table\"}\n        </div>\n        <div className=\"flex flex-row justify-end\">\n          <div\n            className={`p-2 rounded flex flex-row items-center text-sm mr-1 cursor-pointer ${\n              view === \"map\"\n                ? \"bg-gray-500 text-white\"\n                : \"bg-gray-400 text-gray-700\"\n            }`}\n            onClick={() => setView(\"map\")}\n          >\n            <FaMap className=\"mr-2\" /> Map view\n          </div>\n          <div\n            className={`p-2 rounded flex flex-row items-center text-sm mr-1 cursor-pointer ${\n              view === \"data\"\n                ? \"bg-gray-500 text-white\"\n                : \"bg-gray-400 text-gray-700\"\n            }`}\n            onClick={() => setView(\"data\")}\n          >\n            <FaTable className=\"mr-2\" /> Data View\n          </div>\n        </div>\n      </div>\n      <div\n        className={`map-card ${view !== \"map\" && \"hidden\"}`}\n        ref={el}\n        style={{ width: \"100%\", height: \"100%\" }}\n      ></div>\n      {view === \"data\" && (\n        <div className={`map-card ${view !== \"data\" && \"hidden\"}`}>\n          <Table selected={selected} />\n        </div>\n      )}\n    </div>\n  );\n};\nexport default Map;\n","import React from \"react\";\nimport { GoTriangleUp, GoTriangleDown } from \"react-icons/go\";\nexport default function Rate({\n  bg = \"bg-white\",\n  color = \"text-black\",\n  title = \"My Rate\",\n  subtitle = null,\n  value = 0,\n  delta = false,\n}) {\n  return (\n    <div\n      className={`rounded shadow p-3 flex flex-col shadow-lg border border-gray-300 h-32 justify-between ${bg} ${color}`}\n    >\n      <div className=\"flex flex-col\">\n        <label className=\"text-base font-bold text-gray-600 w-full text-right\">\n          {title}\n        </label>\n        <label className=\"text-xs text-gray-500 w-full text-right\">\n          {subtitle}\n        </label>\n      </div>\n\n      <div\n        className={`flex flex-row items-center w-full ${\n          delta ? \"justify-between\" : \"justify-end\"\n        }`}\n      >\n        {delta &&\n          (value > 0 ? (\n            <GoTriangleUp className=\"text-2xl\" />\n          ) : (\n            <GoTriangleDown className=\"text-2xl\" />\n          ))}\n        <h1 className=\"font-bold text-2xl\">\n          {isNaN(value) || !isFinite(value)\n            ? \"N/A\"\n            : `${(value * 100).toFixed(2)} %`}\n        </h1>\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\nimport { trendOptions } from \"../services/charts\";\nimport echarts from \"echarts\";\nexport default function Trend({ data = [] }) {\n  const el = useRef();\n  useEffect(() => {\n    if (el && el.current) {\n      const options = trendOptions(echarts, data);\n      let instance = echarts.getInstanceByDom(el.current);\n      // initialize chart\n      if (instance === undefined) {\n        instance = echarts.init(el.current);\n        instance.setOption(options);\n        window.onresize = () => instance.resize();\n      }\n      instance.setOption(options);\n    }\n  }, [data, el]);\n  return <div style={{ width: \"100%\", height: \"100%\" }} ref={el}></div>;\n}\n","import React, { useEffect, useState } from \"react\";\nimport Map from \"./Map\";\nimport Rate from \"./Rate\";\nimport Trend from \"./Trend\";\nimport { getCountryHistory } from \"../services/api\";\n\nexport default function Content({ data, coordinates, selected = null }) {\n  const [history, setHistory] = useState([]);\n  useEffect(() => {\n    getCountryHistory(selected).then((data) => setHistory(data));\n  }, [selected]);\n  const confirmed =\n    history.length > 1\n      ? history.map(({ confirmed }) => confirmed).reduce((acc, c) => acc + c)\n      : 0;\n  const recovered =\n    history.length > 1\n      ? history.map(({ recovered }) => recovered).reduce((acc, c) => acc + c)\n      : 0;\n  const deaths =\n    history.length > 1\n      ? history.map(({ deaths }) => deaths).reduce((acc, c) => acc + c)\n      : 0;\n\n  const deltaCases =\n    history.length > 0\n      ? (history[history.length - 1].confirmed -\n          history[history.length - 2].confirmed) /\n        history[history.length - 2].confirmed\n      : 0;\n  const deltaRecovered =\n    history.length > 0\n      ? (history[history.length - 1].recovered -\n          history[history.length - 2].recovered) /\n        history[history.length - 2].recovered\n      : 0;\n  const deltaDeaths =\n    history.length > 0\n      ? (history[history.length - 1].deaths -\n          history[history.length - 2].deaths) /\n        history[history.length - 2].deaths\n      : 0;\n  return (\n    <div id=\"details-wrapper\">\n      <Map data={data} coordinates={coordinates} selected={selected} />\n      <div className=\"flex flex-col md:flex-row my-2 flex-wrap\">\n        <div className=\"w-full flex flex-wrap\">\n          <div className=\"w-1/5  p-1\">\n            <Rate\n              color=\"text-green-500\"\n              title=\"Heal Rate\"\n              subtitle=\"Total\"\n              value={recovered / confirmed}\n            />\n          </div>\n          <div className=\"w-1/5  p-1\">\n            <Rate\n              color=\"text-red-500\"\n              title=\"Death Rate\"\n              subtitle=\"Total\"\n              value={deaths / confirmed}\n            />\n          </div>\n          <div className=\"w-1/5  p-1\">\n            <Rate\n              delta\n              color=\"text-yellow-500\"\n              title=\"Cases\"\n              subtitle=\"Today vs Yesterday\"\n              value={deltaCases}\n            />\n          </div>\n          <div className=\"w-1/5 p-1\">\n            <Rate\n              delta\n              color=\"text-green-500\"\n              title=\"Recovered\"\n              subtitle=\"Today vs Yesterday\"\n              value={deltaRecovered}\n            />\n          </div>\n          <div className=\"w-1/5 p-1\">\n            <Rate\n              delta\n              color=\"text-red-500\"\n              title=\"Deaths\"\n              subtitle=\"Today vs Yesterday\"\n              value={deltaDeaths}\n            />\n          </div>\n        </div>\n\n        <div className=\"w-full flex flex-row p-1\">\n          <div\n            className={`w-full rounded shadow p-3 bg-white flex flex-col items-end shadow-lg border border-gray-300 h-64 `}\n          >\n            <Trend data={history} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nexport default function Card({ Icon, value, title, color = \"black\" }) {\n  return (\n    <div\n      className={`flex flex-row md:flex-row items-center rounded md:rounded-lg justify-center  bg-${color} text-white px-3 p-1 m-1`}\n    >\n      <Icon className=\"md:mx-2 text-2xl mr-2\" />\n      <div>\n        <p className=\"font-bold text-base\">\n          {value ? value.toLocaleString() : \"...\"}\n        </p>\n        <p className=\"flex flex-row text-xs flex-auto uppercase md:text-right\">\n          {title}\n        </p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nexport default function ToggleCard({ children, Icon, title, ...rest }) {\n  return (\n    <div\n      {...rest}\n      style={{ minWidth: 300 }}\n      className={`card flex flex-row flex-wrap rounded shadow mx-3 bg-white p-2 flex flex-row justify-between`}\n    >\n      <div className=\"w-full flex flex-row items-center text-gray-500 justify-between h-10\">\n        <h2 className=\"flex flex-row font-bold text-sm items-center\">\n          <Icon className=\"mx-2\" />\n          {title}\n        </h2>\n      </div>\n      <>{children}</>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { getFlagUrl } from \"../services/countries\";\nimport Trend from \"./Trend\";\nimport { FaChevronDown, FaChevronUp, FaCheck } from \"react-icons/fa\";\n\nconst CountryListItem = ({ selected, name, setSelected, data, history }) => {\n  return (\n    <div className=\"country-list-item\">\n      <div className={`card ${selected === name ? \"wide\" : \"\"}`}>\n        <div className=\"content\">\n          <div\n            className=\"headline\"\n            onClick={() =>\n              selected === name ? setSelected(null) : setSelected(name)\n            }\n          >\n            <div className=\"left\">\n              <img className=\"icon\" alt=\"Country flag\" src={getFlagUrl(name)} />\n              <div className=\"title\">{name}</div>\n            </div>\n            <div className=\"right mobile\">\n              {selected === name ? <FaChevronUp /> : <FaChevronDown />}\n            </div>\n            <div className={`right desktop ${selected === name && \"selected\"}`}>\n              <FaCheck />\n            </div>\n          </div>\n          {selected === name ? (\n            <div className=\"p-3 m-1 rounded flex flex-col h-full visible md:hidden\">\n              <Trend data={history} />\n            </div>\n          ) : null}\n          <div className=\"numbers\">\n            <div className=\"item\">\n              <span className=\"title\">Cases</span>\n              <p className=\"value text-yellow-500\">\n                {data[\"cases\"].toLocaleString()}\n              </p>\n            </div>\n            <div className=\"item\">\n              <span className=\"title\">Deaths</span>\n              <p className=\"value text-red-500\">\n                {data[\"deaths\"].toLocaleString()}\n              </p>\n            </div>\n            <div className=\"item\">\n              <span className=\"title\">Recovered</span>\n              <p className=\"value text-green-500\">\n                {data[\"recovered\"].toLocaleString()}\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default CountryListItem;\n","import React from \"react\";\nimport { FaSearch } from \"react-icons/fa\";\n\nexport default function FilterBar({\n  settings,\n  selected,\n  onSelect,\n  onTextChange,\n}) {\n  return (\n    <>\n      <div className=\"flex flex-col\">\n        <div className=\"flex flex-col bg-white justify-between bg-white rounded-lg text-gray-800 p-2 shadow w-full\">\n          <div className=\"flex flex-row  rounded-lg h-8\">\n            <FaSearch className=\"mx-2 self-center text-gray-600\" />\n            <input\n              className=\"p-2 w-full m-1 bg-white rounded font-bold text-gray-700\"\n              onChange={(e) => onTextChange(e.target.value)}\n              placeholder=\"Find your country\"\n            />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { FaCross, FaHospital } from \"react-icons/fa\";\nimport { GiHealing } from \"react-icons/gi\";\nimport CountryItem from \"./CountryListItem\";\nimport FilterBar from \"./FilterBar\";\nimport { getCountryHistory } from \"../services/api\";\nconst filters = {\n  cases: {\n    title: \"Cases\",\n    activeClass: \"bg-yellow-500\",\n    icon: <FaHospital />,\n  },\n  deaths: {\n    title: \"Deaths\",\n    activeClass: \"bg-red-500\",\n    icon: <FaCross />,\n  },\n  recovered: {\n    title: \"Recovered\",\n    activeClass: \"bg-green-500\",\n    icon: <GiHealing />,\n  },\n};\n\nexport default function CountryList({ data, setSelected, selected }) {\n  const countryData = data.map(([name, cases, deaths, recovered]) => ({\n    name,\n    cases,\n    deaths,\n    recovered,\n  }));\n  const [filter, setFilter] = useState(\"cases\");\n  const [search, setSearch] = useState(\"\");\n  const [history, setHistory] = useState([]);\n  countryData.sort(({ [filter]: a }, { [filter]: b }) => b - a);\n\n  useEffect(() => {\n    if (selected) {\n      getCountryHistory(selected).then((data) => setHistory(data));\n    }\n  }, [selected]);\n\n  return (\n    <>\n      <div className=\"w-full p-3\">\n        <FilterBar\n          selected={filter}\n          onTextChange={setSearch}\n          settings={filters}\n          onSelect={(name) => setFilter(name)}\n        />\n      </div>\n\n      <div id=\"country-list\">\n        {countryData\n          .filter(({ name }) =>\n            name.toLowerCase().includes(search.toLowerCase())\n          )\n          .map(({ name, ...data }, index) => (\n            <CountryItem\n              key={index}\n              selected={selected}\n              name={name}\n              setSelected={setSelected}\n              data={data}\n              history={history}\n              filter={filter}\n            />\n          ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport Card from \"./Card\";\nimport ToggleCard from \"./ToggleCard\";\nimport CountryList from \"./CountryList\";\nimport { FaCross, FaHospital } from \"react-icons/fa\";\nimport { GiHealing, GiWorld } from \"react-icons/gi\";\nexport default function StatsBar({\n  globalStats,\n  statsByCountry,\n  setSelected,\n  selected,\n  showSideBar,\n}) {\n  return (\n    <div id=\"stats-bar\" className={` ${showSideBar ? \"show\" : \"hide\"}`}>\n      <ToggleCard\n        id=\"global-stats-card\"\n        title=\"Global Stats\"\n        Icon={GiWorld}\n        onToggle={() => alert(\"\")}\n        open={true}\n      >\n        <div className=\"w-full\">\n          <Card\n            Icon={FaHospital}\n            title=\"Confirmed\"\n            value={globalStats.cases}\n            color={\"yellow-500\"}\n          />\n        </div>\n        <div className=\"w-1/2\">\n          <Card\n            Icon={FaCross}\n            title=\"Deaths\"\n            value={globalStats.deaths}\n            color=\"red-500\"\n          />\n        </div>\n        <div className=\"w-1/2\">\n          <Card\n            Icon={GiHealing}\n            title=\"Recovered\"\n            value={globalStats.recovered}\n            color=\"green-500\"\n          />\n        </div>\n      </ToggleCard>\n      <CountryList\n        data={statsByCountry}\n        setSelected={setSelected}\n        selected={selected}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { FaBars } from \"react-icons/fa\";\nimport Logo from \"../img/logo.svg\";\nexport default function TopBar({ showSideBar, setShowSideBar }) {\n  return (\n    <nav className=\"w-full shadow-b p-3 flex flex-row justify-between z-10 bg-gray-100\">\n      <div\n        className={`cursor-pointer md:invisible p-1 rounded hover:bg-gray-400 ${\n          showSideBar ? \"\" : \"bg-gray-400\"\n        }`}\n        onClick={() => setShowSideBar(!showSideBar)}\n      >\n        <FaBars />\n      </div>\n      <div className=\"flex flex-row\">\n        <img\n          className=\"mr-2\"\n          src={Logo}\n          style={{ width: 25, height: 25 }}\n          alt=\"Logo\"\n        />\n        <h1 className=\"font-bold text-gray-700\">COVID-19</h1>\n      </div>\n      <div>\n        by{\" \"}\n        <a\n          href=\"https://vasconez.dev\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <b>jvas28</b>\n        </a>\n      </div>\n    </nav>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { getCoordinates } from \"./services/geolocation\";\nimport { casesByCountry, getGlobalStats } from \"./services/api\";\nimport \"./App.sass\";\nimport Content from \"./components/Content\";\nimport StatsBar from \"./components/StatsBar\";\nimport TopBar from \"./components/TopBar\";\nfunction App() {\n  const [coordinates, setCoordinates] = useState([0, 0]);\n  const [data, setData] = useState([]);\n  const [globalStats, setGlobalStats] = useState({\n    cases: null,\n    deaths: null,\n    recovered: null,\n  });\n  const [showSideBar, setShowSideBar] = useState(true);\n  const [selected, setSelected] = useState(null);\n  useEffect(() => {\n    getCoordinates(({ latitude, longitude }) =>\n      setCoordinates([longitude, latitude])\n    );\n    if (data.length < 1) {\n      casesByCountry().then((d) => {\n        setData(d);\n      });\n      if (globalStats.cases === null) {\n        getGlobalStats().then((stats) => {\n          setGlobalStats(stats);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, globalStats]);\n\n  return (\n    <div className=\"App\">\n      <TopBar showSideBar={showSideBar} setShowSideBar={setShowSideBar} />\n      <div className={`main-wrapper`} style={{ height: \"calc(100vh - 48px)\" }}>\n        <StatsBar\n          selected={selected}\n          showSideBar={showSideBar}\n          setSelected={setSelected}\n          globalStats={globalStats}\n          statsByCountry={data}\n        />\n        <Content data={data} coordinates={coordinates} selected={selected} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const getCoordinates = (success, error = null) => {\n    if (!navigator.geolocation) {\n        console.log('Geolocation not supported');\n      } else {\n        navigator.geolocation.getCurrentPosition(\n            (position)=> {\n              success({latitude: position.coords.latitude, longitude: position.coords.longitude })\n            }\n            , error\n            );\n      }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}