{"version":3,"sources":["services/client.js","services/api.js","services/countries.js","services/charts.js","components/Map.jsx","components/Card.jsx","components/ToggleCard.js","components/FilterBar.js","components/Trend.js","components/CountryList.jsx","components/StatsBar.jsx","components/TopBar.jsx","App.js","services/geolocation.js","serviceWorker.js","index.js"],"names":["client","axios","create","baseURL","headers","process","inMap","Object","keys","namesMap","getCountryByName","n","countries","find","name","getFlagUrl","country","code","mapOptions","coordinates","rawData","geoCoordMap","mapData","forEach","item","geoCoord","push","value","slice","backgroundColor","tooltip","trigger","geo","show","map","top","silent","zoom","center","scaleLimit","min","max","zlevel","emphasis","label","areaColor","itemStyle","borderWidth","borderColor","shadowColor","shadowBlur","roam","grid","series","type","coordinateSystem","data","selectedMode","activeOpacity","formatter","position","cases","deaths","recovered","active","toLocaleString","symbolSize","Math","sqrt","parseInt","color","echarts","registerMap","world","Map","selected","el","useRef","coordMap","latitude","longitude","parseFloat","getCoordMap","getOption","useEffect","current","options","instance","getInstanceByDom","undefined","init","setOption","window","onresize","resize","ref","style","width","height","Card","Icon","title","className","ToggleCard","children","minWidth","FilterBar","settings","onSelect","onTextChange","onChange","e","target","placeholder","entries","icon","activeClass","onClick","key","Trend","dates","total_cases","total_deaths","total_recovered","record_date","replace","axisPointer","bottom","left","right","xAxis","boundaryGap","yAxis","smooth","normal","areaStyle","trendOptions","console","log","filters","CountryItem","setSelected","history","filter","alt","src","CountryList","countryData","useState","setFilter","search","setSearch","setHistory","sort","a","apiName","get","params","then","response","stat_by_country","getCountryHistory","toLowerCase","includes","index","StatsBar","globalStats","statsByCountry","showSideBar","id","GiWorld","onToggle","alert","open","FaHospital","FaCross","GiHealing","FaMapMarkerAlt","TopBar","setShowSideBar","href","App","setCoordinates","setData","setGlobalStats","success","error","navigator","geolocation","getCurrentPosition","coords","getCoordinates","length","countries_stat","country_name","active_cases","catch","d","stats","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","document","getElementById","URL","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.91027a58.chunk.js","sourcesContent":["import axios from 'axios';\nconst client = axios.create({\n    baseURL: \"https://coronavirus-monitor.p.rapidapi.com/coronavirus\",\n    headers: {\n        \"x-rapidapi-host\": process.env.REACT_APP_API_HOST,\n\t    \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\n    }\n})\nexport default client;","import client from  './client';\nimport namesMap from './data/names.map';\nconst inMap = Object.keys(namesMap);\n  \nexport const casesByCountry = () => {\n    return client.get('cases_by_country.php').then((response)=>{\n        if (response && response.data && response.data.countries_stat) {\n            const {data:{countries_stat}} = response;\n            return countries_stat.map(({country_name, cases, deaths,  total_recovered, active_cases})=>{\n                return  [inMap.includes(country_name)?namesMap[country_name]:country_name, \n                parseInt(cases.replace(',','')),\n                parseInt(deaths.replace(',','')),\n                parseInt(total_recovered.replace(',','')),\n                parseInt(active_cases.replace(',','')),\n            ];\n            })\n        }\n    }).catch((e)=>{\n        console.error(e);\n    });\n}\nexport const getGlobalStats = () => {\n    return client.get('worldstat.php').then((response) => {\n        let { total_cases, total_deaths, total_recovered } = response.data;\n        const cases = parseInt(total_cases.replace(',','')) || 0;\n        const deaths = parseInt(total_deaths.replace(',','')) || 0;\n        const recovered = parseInt(total_recovered.replace(',','')) || 0;\n         return {\n            cases,\n            deaths,\n            recovered\n        }\n\n    })\n}\nexport const getCountryHistory = (n) => {\n    let country=n;\n    Object.entries(namesMap).forEach(([apiName, name])=>{\n        if(name === n) {\n            country=apiName;\n        }\n    })\n    return client.get('cases_by_particular_country.php', {params:{country}}).then((response)=>{\n        return response.data.stat_by_country;\n    })\n}","import countries from \"./data/countries.json\";\nexport const getCountryByName = n => {\n  return countries.find(({ name }) => n === name);\n};\nexport const getCoordMap = () => {\n  const coordMap = {};\n  countries.forEach(({ name, latitude, longitude }) => {\n    coordMap[name] = [parseFloat(longitude), parseFloat(latitude)];\n  });\n  return coordMap;\n};\nexport const missing = names => {\n  const existing = countries.map(({ name }) => {\n    return name;\n  });\n  return names.filter(name => !existing.includes(name));\n};\n\nexport const getFlagUrl = (name) => {\n  const country = getCountryByName(name);\n  if(country) {\n    return `https://www.countryflags.io/${country.code}/flat/32.png`\n  } else {\n    return \"https://via.placeholder.com/32x32\"\n  }\n  \n}","import { getFlagUrl } from './countries';\nexport const mapOptions = (coordinates = null, rawData, geoCoordMap)=>{\n    var mapData = [];\n    rawData.forEach((item)=>{\n        const geoCoord = geoCoordMap[item[0]];\n         if (geoCoord) {\n            mapData.push({\n                name: item[0],\n                value: [...geoCoord, ...item.slice(1)]\n            });\n        }\n    });\n    return {\n        backgroundColor: '#e2e8f0',\n        tooltip: {\n            trigger: 'item',\n        },\n        geo: {\n            show: true,\n            map: 'world',\n            top:100,\n            silent: true,\n            zoom: coordinates?8:1,\n            center: coordinates ?? [],\n            scaleLimit: {\n                min: 1,\n                max: 10,\n            },\n            zlevel:0,\n            emphasis: {\n                label: {\n                    areaColor: '#eee'\n                },\n                itemStyle: {\n                    areaColor: 'lightgray',\n                }\n            },\n            itemStyle: {\n                borderWidth: 0.4,\n                borderColor: '#404a59',\n                backgroundColor: 'blue'\n            },\n            shadowColor: 'rgba(0, 0, 0, 0.5)',\n            shadowBlur: 10,\n            roam: true\n        },\n        grid: [{\n            show: false,\n            borderColor: 'transparent',\n            backgroundColor: '#404a59',\n        }, \n        ],\n        series: [\n            {\n                name: 'Cases',\n                type: 'scatter',\n                coordinateSystem: 'geo',\n                data: mapData,\n                borderWidth:1,\n                selectedMode: 'simple',\n                activeOpacity: 1,\n                label: {\n                    formatter: '{b}',\n                    position: 'right',\n                    show: true\n                },\n                tooltip: {\n                    formatter: function(item){\n                        const [,,cases, deaths, recovered, active ] = item.data.value;\n                        return `\n                        <img src=\"${getFlagUrl(item.name)}\" />\n                        <h1 class=\"font-bold\">${item.name}</h1>\n                        <p><b>Infected:</b> ${cases.toLocaleString()}</p>\n                        <p><b>Death:</b> ${deaths.toLocaleString()}</p>\n                        <p><b>Recovered:</b> ${recovered.toLocaleString()}</p>\n                        <p><b>Active:</b> ${active.toLocaleString()}</p>\n                        `;\n                    },\n                },\n                symbolSize: function (data) {\n                    return Math.sqrt(parseInt(data[2]))/4;\n                }\n                ,itemStyle: {\n                    color: 'rgba(244, 67, 54, 0.54)',\n                    borderColor: 'red',\n                },\n               \n            }\n        ]\n    }\n};\n\nexport const trendOptions = (echarts, rawData) => {\n    let cases = [],deaths=[], recovered=[], dates=[];\n    rawData.forEach((item)=>{\n        let { total_cases, total_deaths, total_recovered, record_date } = item;\n        total_cases = parseInt(total_cases.replace(',',''));\n        total_deaths = parseInt(total_deaths.replace(',',''));\n        total_recovered = parseInt(total_recovered.replace(',',''));\n                \n                dates.push(record_date);\n                recovered.push(total_recovered);\n                cases.push(total_cases);\n                deaths.push(total_deaths);\n    })\n    return {\n        tooltip: {\n            trigger: 'axis',\n            axisPointer: {\n                type: 'cross',\n                label: {\n                    backgroundColor: '#6a7985'\n                }\n            }\n        },\n        grid:{\n            backgroundColor: 'transparent',\n            top:0,\n            bottom: 10,\n            left:20,\n            right: 20,\n        },\n        xAxis: [\n            {\n                type: 'category',\n                boundaryGap: false,\n                data: dates,\n                show: false,\n            }\n        ],\n        yAxis: [\n            {\n                type: 'value',\n                show: false\n            }\n        ],\n         series: [\n            {\n                name: 'Cases',\n                type: 'line',\n                smooth: true,\n                label: {\n                    normal: {\n                        show: true,\n                        position: 'top'\n                    }\n                },\n                color:\"#ecc94b\",\n                areaStyle: {\n                    color: '#ecc94bc7',\n                },\n                data: cases\n            },\n            {\n                name: 'Deaths',\n                type: 'line',\n                smooth: true,\n                color: \"#f56565\",\n                label: {\n                    normal: {\n                        show: true,\n                        position: 'top'\n                    }\n                },\n                areaStyle: {\n                    color: \"#f56565c7\",\n                },\n                data: deaths\n            },\n            {\n                name: 'Recovered',\n                type: 'line',\n                smooth: true,\n                color:\"#48bb78\",\n                label: {\n                    normal: {\n                        show: true,\n                        position: 'top'\n                    }\n                },\n                areaStyle: {\n                    color: \"#48bb78c7\",\n                },\n                data: recovered\n            },\n        ]\n    };\n}","import React, {useEffect, useRef} from 'react'\nimport { getCoordMap, getCountryByName } from '../services/countries';\nimport { mapOptions } from '../services/charts'\nimport echarts from 'echarts/dist/echarts';\nimport world from 'echarts/map/json/world';\necharts.registerMap('world', world);\nconst Map =  ({data, coordinates, selected}) => {\n    const el = useRef();\n    const geoCoordMap = getCoordMap();\n    const getOption = mapOptions\n    useEffect(()=>{\n        if(el && el.current) {\n            const options = getOption(coordinates, data, geoCoordMap);\n            let instance = echarts.getInstanceByDom(el.current);\n            // initialize chart\n            if(instance === undefined) {\n                instance = echarts.init(el.current);\n                instance.setOption(options);\n                window.onresize = () => instance.resize();\n            }\n            instance.setOption(options);  \n        }\n        \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[data, coordinates]);\n    useEffect(()=>{\n        const country = getCountryByName(selected);\n        if(country) {\n            let { latitude, longitude} = country;\n            latitude =  parseFloat(latitude);\n            longitude =  parseFloat(longitude);\n            const options = getOption([longitude, latitude], data, geoCoordMap);\n            let instance = echarts.getInstanceByDom(el.current);\n            instance.setOption(options);  \n        }\n        \n\n    },[data, geoCoordMap, getOption, selected]);\n    \n    return (\n        <div ref={el}  style={{width: '100%', height: '100vh'}}>\n        </div>\n    )\n}\nexport default Map;","import React from 'react'\nexport default function Card({Icon, value, title, color=\"black\"}) {\n    return (\n        <div className={`flex flex-col md:flex-row items-center rounded md:rounded-lg  bg-${color} text-white p-3 m-1`}>\n            <Icon className=\"md:mx-2\" />\n            <p className=\"font-bold text-base\">{value ? value.toLocaleString(): '...'}</p>\n            <p className=\"text-xs flex-auto uppercase md:text-right\">{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nexport default function ToggleCard({children, Icon, title}) {\n    return (\n      <div style={{minWidth: 100}} className={`card flex flex-row md:flex-col flex-wrap rounded shadow m-3 bg-white p-2 flex flex-row justify-between`}>\n        <div className=\"w-full flex flex-row items-center text-gray-500 justify-between h-10\">\n            <h2 className=\"flex flex-row font-bold items-center\"><Icon className=\"mx-2\"/>{title}</h2>  \n        </div>\n        <>\n        {children}\n        </>\n      </div>\n    )\n}\n","import React from 'react'\n\nexport default function FilterBar({settings, selected, onSelect, onTextChange }) {\n    return (\n        <div className=\"flex flex-col justify-between bg-gray-300 p-2 rounded text-gray-800\" >\n            <div className=\"flex flex-row\">\n                <input className=\"p-2 w-full m-1 rounded\" onChange={(e)=>onTextChange(e.target.value)} placeholder=\"Type your country name\" />\n            </div>\n            <div className=\"flex flex-row\">\n                    {\n                        Object.entries(settings).map(([name, {icon, activeClass}])=>{\n                            return <div onClick={()=>onSelect(name)} \n                            key={name}\n                            className={`flex flex-auto cursor-pointer\n                            text-center content-center bg-gray-400 p-2 rounded justify-center m-1\n                            ${selected===name ? activeClass: ''}`}>\n                        {icon}\n                    </div>\n                        })\n                    }\n            </div>\n        </div>\n    )\n}\n","import React,{useEffect, useRef} from 'react'\nimport { trendOptions } from '../services/charts'\nimport echarts from 'echarts';\nexport default function Trend({data=[]}) {\n    const el = useRef();\n    useEffect(() => {\n        if(el && el.current) {\n            const options = trendOptions(echarts, data);\n            let instance = echarts.getInstanceByDom(el.current);\n            // initialize chart\n            if(instance === undefined) {\n                instance = echarts.init(el.current);\n                instance.setOption(options);\n                window.onresize = () => instance.resize();\n            }\n            instance.setOption(options);  \n        }\n        console.log(data);\n    }, [data, el])\n    return (\n        <div style={{width: \"100%\", height:\"250px\"}} ref={el} >\n            \n        </div>\n    )\n}\n","import React, {useState, useEffect} from 'react'\nimport { FaCross, FaHospital } from 'react-icons/fa';\nimport FilterBar from './FilterBar'\nimport { GiHealing } from \"react-icons/gi\";\nimport { getFlagUrl } from '../services/countries'\nimport { getCountryHistory } from '../services/api';\nimport Trend from './Trend';\nconst filters = {\n        cases: {\n            title:'Cases',\n            activeClass: 'bg-yellow-500',\n            icon: <FaHospital/>\n        },\n        deaths: {\n            title:'Deaths',\n            activeClass: 'bg-red-500',\n            icon: <FaCross />\n        },\n        recovered: {\n            title:'Recovered',\n            activeClass: 'bg-green-500',\n            icon: <GiHealing/>\n        }\n    };\nconst CountryItem = ({selected, name, setSelected, data, history, filter})=>{\n    return (<div className=\"p-1\">\n    <div className={`p-3 cursor-pointer rounded\n    flex flex-col bg-gray-100 ${selected===name?'wide':''}`}>\n        <div className=\"flex flex-row items-center justify-between\" onClick={()=>selected === name ? setSelected(null): setSelected(name)}>\n            <div className=\"flex flex-row items-center justify-center\">\n                <img className=\"mr-2\" alt=\"Country flag\" src={getFlagUrl(name)} />\n                <span>{name}</span>\n            </div>\n            <div>{data[filter] ? data[filter].toLocaleString():''}</div>\n        </div>\n        {selected===name?<div className=\"p-3 m-1 rounded\">\n            <Trend data={history} />\n        </div>:null}\n    </div></div>)\n}\nexport default function CountryList({data, setSelected, selected}) {\n    const countryData = data.map(([name, cases, deaths, recovered])=>({\n        name,\n        cases,\n        deaths,\n        recovered\n    }));\n    const [filter, setFilter] = useState('cases');\n    const [search, setSearch] = useState('');\n    const [history, setHistory] = useState([]);\n    countryData.sort(({[filter]: a},{[filter]: b})=>b-a );\n\n    useEffect(()=>{\n        if(selected) {\n            getCountryHistory(selected).then((data)=>\n                setHistory(data)\n            );\n        }\n        \n    },[selected])\n\n    return (\n        <>\n        <div className=\"w-full\">\n            <FilterBar selected={filter} onTextChange={setSearch} settings={filters} onSelect={(name)=>setFilter(name)} />\n        </div>\n        \n        <div className=\"flex flex-col w-full overflow-y-scroll overflow-x-visible\" style={{height:\"calc(100vh - 500px)\"}}>\n            {\n                countryData\n                .filter(({name})=>name.toLowerCase().includes(search.toLowerCase()))\n                .map(({name, ...data}, index)=>(<CountryItem selected={selected} name={name} setSelected={setSelected} data={data} history={history} filter={filter} />))\n            }\n        </div>\n        </>\n    )\n}\n","import React from 'react'\nimport Card from './Card';\nimport ToggleCard from './ToggleCard';\nimport CountryList from './CountryList';\nimport { FaCross, FaHospital, FaMapMarkerAlt } from 'react-icons/fa';\nimport { GiHealing, GiWorld } from \"react-icons/gi\";\nexport default function StatsBar({globalStats, statsByCountry, setSelected, selected, showSideBar}) {\n    return (\n        <div id=\"side-bar\" className={`absolute z-10 mt-12 md:z-10  ${showSideBar?'w-full md:w-1/3 lg:w-1/4 xl:1/5':'w-0 overflow-hidden'}`}>\n            <ToggleCard title=\"Global Stats\" Icon={GiWorld} onToggle={()=>alert('')} open={true}>\n                <div className=\"w-full\">\n                    <Card Icon={FaHospital} title=\"Confirmed\" value={globalStats.cases} color={'yellow-500'}/>\n                </div>\n                <div className=\"w-1/2 md:w-full\">\n                    <Card Icon={FaCross} title=\"Deaths\" value={globalStats.deaths} color=\"red-500\"/>\n                </div>\n                <div className=\"w-1/2 md:w-full\">\n                    <Card Icon={GiHealing} title=\"Recovered\" value={globalStats.recovered} color=\"green-500\"/>\n                </div>\n            </ToggleCard>\n            <ToggleCard title=\"Stats by country\" Icon={FaMapMarkerAlt} onToggle={()=>alert('')} open={true}>\n                <CountryList data={statsByCountry} setSelected={setSelected} selected={selected} />\n            </ToggleCard>\n        </div>\n    )\n}\n","import React from 'react'\nimport { FaBars } from 'react-icons/fa'\nexport default function TopBar({showSideBar, setShowSideBar}) {\n    return (\n        <header className=\"w-full shadow-b p-3 flex flex-row justify-between fixed z-10 bg-gray-100\">\n            <div className={`cursor-pointer p-1 rounded hover:bg-gray-400 ${showSideBar?'':'bg-gray-400'}`} \n            onClick={()=>setShowSideBar(!showSideBar)}><FaBars /></div>\n            <h1 className=\"font-bold text-gray-700\">Coronavirus Dashboard</h1>\n            <div>by <a href=\"https://github.com/jvas28\"><b>jvas28</b></a></div>\n      </header>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport { getCoordinates } from './services/geolocation'\nimport { casesByCountry, getGlobalStats } from './services/api'\nimport './App.scss';\nimport Map from './components/Map';\nimport StatsBar from './components/StatsBar';\nimport TopBar from './components/TopBar';\nfunction App() {\n  const [coordinates, setCoordinates] = useState([0,0]);\n  const [data, setData] = useState([]);\n  const [globalStats, setGlobalStats] = useState({\n    cases: null,\n    deaths: null,\n    recovered: null,\n  });\n  const [showSideBar, setShowSideBar] = useState(true);\n  const [selected, setSelected] = useState(null);\n  useEffect(()=>{\n    getCoordinates(({latitude, longitude})=>setCoordinates([longitude, latitude]));\n    if(data.length < 1) {\n      casesByCountry().then((d) => {\n          setData(d)\n     });\n     if(globalStats.cases === null) {\n      getGlobalStats().then((stats)=>{\n        setGlobalStats(stats);\n      });\n     }\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, globalStats]);\n\n  return (\n    <div className=\"App\">\n      <TopBar showSideBar={showSideBar} setShowSideBar={setShowSideBar} />\n      <div className=\"flex flex-col md:flex-row w-full bg-gray-300 absolute\">\n        <StatsBar \n        selected={selected}\n        showSideBar={showSideBar}\n        setSelected={setSelected}\n        globalStats={globalStats}\n        statsByCountry={data}/>\n        <div className=\"w-full h-full\">\n          <Map data={data} coordinates={coordinates} selected={selected} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const getCoordinates = (success, error = null) => {\n    if (!navigator.geolocation) {\n        console.log('Geolocation not supported');\n      } else {\n        navigator.geolocation.getCurrentPosition(\n            (position)=> {\n              success({latitude: position.coords.latitude, longitude: position.coords.longitude })\n            }\n            , error\n            );\n      }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}